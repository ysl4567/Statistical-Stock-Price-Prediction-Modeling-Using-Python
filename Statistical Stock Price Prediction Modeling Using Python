{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ysl4567/Statistical-Stock-Price-Prediction-Modeling-Using-Python/blob/main/Statistical%20Stock%20Price%20Prediction%20Modeling%20Using%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GS7ERkSBtrh7"
      },
      "source": [
        "## Stock Price Prediction Model in Python Using Geometric Brownian Motion (GBM), Bootstrapping, and Jump Diffusion Models\n",
        "\n",
        "**Teammates:** Yuto Lam, Aaron Zhang, Kevin Chen, Bailey Williams\n",
        "\n",
        "**Intended Audience:** Casual, long-term investors with little experience in statistics and python who would like a general understanding on how their investments will look like a given number of days into the future.\n",
        "\n",
        "**External Libraries Used:** `yfinance`, `pandas`, `matplotlib`, `statsmodel`, `numpy`, `scipy`, `datetime`\n",
        "\n",
        "**Vocabulary:** stocks, closing price prediction, statistics, 95% confidence interval, mean, variance, standard deivation, ticker symbol, normal distribution, simulation, volatility, geometric brownian motion, bootstrap, jump-diffusion\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "azv_2ucRy-M4"
      },
      "source": [
        "## Introduction\n",
        "In this tutorial, we will build a model that predicts the price of a stock a given number of days into the future by employing three statistical models. We will use the Yahoo Finance library (`yfinance`) to extract information the price of a given stock on a given day.\n",
        "\n",
        "As we move through the tutorial, we will discuss:\n",
        "\n",
        "- Important Financial/Statistical Terms and Python libraries\n",
        "\n",
        "- Explore the Yahoo Finance `yfinance` library\n",
        "\n",
        "- High-level background on the statistical models we plan to use\n",
        "\n",
        "- Implementation of the three statistical models and any relevant technical details\n",
        "\n",
        "- Implementation of the data from the models in a graphical form\n",
        "\n",
        "- Necessary user inputs to generate the model\n",
        "\n",
        "- Visualization of the data from the models in a graphical form\n",
        "\n",
        "- Two statistical tests to analze the data and their implications\n",
        "\n",
        "\n",
        "You can run this notebook on [Google Colab](https://colab.research.google.com/).\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "46FJxq0Ivs4t"
      },
      "source": [
        "## Important Financial Terminology\n",
        "\n",
        "Below are important financial terms that describe the values that can be extrated from the `yfinance` library. The only two terms that will be relevant for the main portion of this tutorial are ticker symbol and closing price. [18]\n",
        "\n",
        "- Ticker Symbol: An abbreviation of the the company denoted by the dollar symbol (ex.MSFT for Microsoft, AAPL for Apple, etc.) [18]\n",
        "\n",
        "- Closing Price : The price of a given stock at 4pm EST on a day the stock market is open. [18]\n",
        "\n",
        "- Current Price: The most recent price at which a stock was traded in the market. [18]\n",
        "\n",
        "- Market Capitalization (Market Cap): The total value of a company’s outstanding shares of stock, calculated by multiplying the current stock price by the total number of shares. [18]\n",
        "\n",
        "- Price-to-Earnings Ratio (P/E Ratio): A ratio that compares a company's current share price to its earnings per share (EPS), used to assess if the stock is over or underpriced. [18]\n",
        "\n",
        "- 52 Week High: The highest price a stock has reached in the last 52 weeks (one year). [18]\n",
        "\n",
        "- 52 Week Low: The lowest price a stock has reached in the last 52 weeks (one year). [18]\n",
        "\n",
        "- Volume: The number of shares of a stock that have been traded during a specific period, typically a day. [18]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Important Statistical Terminology\n",
        "\n",
        "Below are important general statistical terms that will be used throughout the tutorial. Specific statistical terms will be described when they are introduced.\n",
        "\n",
        "- Mean: The mean is the average of a set of numbers, calculated by summing all the values and dividing the total by the number of values.\n",
        "\n",
        "- Median: The median is the middle value in a set of numbers when they are arranged in ascending or descending order.\n",
        "\n",
        "- Mode: The mode is the value that appears most frequently in a set of numbers.\n",
        "\n",
        "- 95% Confidence Interval: A 95% confidence interval is a range of values that we are fairly sure (95% sure) includes the true value we're trying to estimate, based on our sample data.\n",
        "\n",
        "- Normal Distribution: A normal distribution is a symmetrical, bell-shaped curve where most values cluster around the average, and the probability of values decreases as they move farther away from the average.\n",
        "\n",
        "\n",
        "- Fitted Normal Distribution: A fitted normal distribution is a normal distribution that is adjusted to match the pattern of a specific set of data, so it best represents how the values in that data are spread out.\n",
        "\n",
        "\n",
        "- Standard Deviation: Standard deviation is a measure of how spread out the values in a set of data are, with a larger standard deviation indicating more variability from the average.\n",
        "\n",
        "\n",
        "- Test Statistics: A test statistic is a value calculated from sample data that is used to determine whether to reject a null hypothesis in a statistical test.\n",
        "\n",
        "\n",
        "- Discrete: Discrete refers to data or variables that can only take specific, distinct values, often counted in whole numbers (like the number of people or cars).\n",
        "\n",
        "\n",
        "- Continuous: Continuous refers to data or variables that can take any value within a range, often measured with precision (like height, weight, or temperature).\n",
        "\n",
        "\n",
        "- Statistical Model: A statistical model is a mathematical representation that describes the relationships between variables in a dataset, used to make predictions or understand patterns.\n",
        "\n",
        "\n",
        "- Statistical Test: A statistical test is a method used to determine if there is enough evidence in sample data to support a specific hypothesis about a population.\n",
        "\n",
        "\n",
        "- Descriptiive Statistic: Descriptive statistics are methods used to summarize and describe the main features of a dataset, such as its average, spread, and distribution.\n",
        "\n",
        "\n",
        "- Sample vs Population: In statistics, a sample is a smaller group selected from a larger population, and while a sample is used to estimate characteristics of the population, it may not exactly reflect the population's true values.\n",
        "\n",
        "\n",
        "- Histogram: A histogram is a graphical representation of the distribution of a dataset, showing how frequently each range of values (or bins) occurs."
      ],
      "metadata": {
        "id": "ecgEsFxANHsY"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aE765Bf3vWnw"
      },
      "source": [
        "## Import Relevant Libraries\n",
        "\n",
        "A library in Python is a collection of pre-written code that provides functions to perform common tasks without having to write everything from scratch.\n",
        "\n",
        "\n",
        "- `yfinance` - Used to fetch financial data from Yahoo Finance. The `yfinance` library will be called up subsequently using `yf`.\n",
        "\n",
        "- `pandas` - Used for data manipulation and data analysis. The `pandas` library will be called up subsequently using `pd`.\n",
        "\n",
        "- `matplotlib` - Used for statistical modeling and hypothesis stesting. The `matplotlib` library will be called up subsequently using `plt`.\n",
        "\n",
        "- `statsmodel` - Used for numerical computing. The `statsmodel` library will be called up subsequently using `sm`.\n",
        "\n",
        "- `numpy` - Used for numerical computing when working with arrays. The `numpy` library will be called up subsequently using `np`.\n",
        "\n",
        "- `scipy` - Used for technical computing with larger number of statistical functions. The `scipy` library will help generate a normal distribution when called up subsequently using `norm`, and the Kruksal Wallis Test defined and explored at the end of the tutorial will be called up subsequently using `kruksal`. The `scipy` library will help generate descriptive statistical terms such as the mode when called up subsequently using `stats`. [20]\n",
        "\n",
        "- `datetime` - Used to provide date and times. The `dateimte` library will be called up subsequently using `datetime`.\n",
        "\n",
        "- `tabulate` - Used to visualize data in table in an aesthetically pleasing way. The `tabulate` library will be called up subsequently using  `tabulate` [19]\n",
        "\n",
        "- `random` - Used to generate random values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TuI6b-V1vWt6"
      },
      "outputs": [],
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import statsmodels.api as sm\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "from scipy.stats import norm\n",
        "from scipy.stats import kruskal\n",
        "from datetime import datetime\n",
        "from tabulate import tabulate\n",
        "import random"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Information Provided by Yahoo Finance\n",
        "Before diving into the tutorial, we want to visualize the data that YahooFinance is also to provide to fully appreciate the power of the library. The only piece of information listed below that is used in the tutorial is the `Closing Price` column.\n",
        "\n",
        "This code fetches and displays stock data for 15 randomly selected companies from a predefined list of S&P 500 tickers using the `yfinance` library. The S&P500 stock market index that tracks the performance of 500 of the largest publicly traded companies in the United States. See if you recognize any of the companies!\n",
        "\n",
        "It retrieves details such as the company name, current price, closing price, market cap, and more, and handles missing data with a fallback value of `N/A`. The data is organized into a `pandas` DataFrame and formatted into a visually appealing table using the `tabulate` library. Errors during data retrieval are caught and logged without stopping the program."
      ],
      "metadata": {
        "id": "q_4ZTYhIYpb1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# List of some S&P 500 tickers\n",
        "sp500_tickers = [\n",
        "    \"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\", \"BRK-B\", \"NVDA\", \"JNJ\",\n",
        "    \"V\", \"UNH\", \"XOM\", \"JPM\", \"META\", \"PG\", \"HD\", \"PFE\", \"CVX\",\n",
        "    \"KO\", \"PEP\", \"DIS\", \"NFLX\", \"ADBE\", \"CSCO\", \"INTC\", \"MRK\"\n",
        "]\n",
        "\n",
        "# Pick 15 random tickers\n",
        "random_tickers = random.sample(sp500_tickers, 15)\n",
        "\n",
        "def get_stock_data(tickers):\n",
        "    stock_data = []\n",
        "    for ticker in tickers:\n",
        "        try:\n",
        "            stock = yf.Ticker(ticker)\n",
        "            stock_info = stock.info\n",
        "\n",
        "            # Get historical data for the closing price\n",
        "            hist = stock.history(period=\"1d\")  # Last day's data\n",
        "            closing_price = hist[\"Close\"].iloc[-1] if not hist.empty else \"N/A\"\n",
        "\n",
        "            # Append stock details into the table\n",
        "            stock_data.append({\n",
        "                \"Ticker\": ticker,\n",
        "                \"Company Name\": stock_info.get(\"longName\", \"N/A\"),\n",
        "                \"Current Price\": stock_info.get(\"currentPrice\", \"N/A\"),\n",
        "                \"Closing Price\": closing_price,\n",
        "                \"Market Cap\": stock_info.get(\"marketCap\", \"N/A\"),\n",
        "                \"PE Ratio\": stock_info.get(\"trailingPE\", \"N/A\"),\n",
        "                \"52 Week High\": stock_info.get(\"fiftyTwoWeekHigh\", \"N/A\"),\n",
        "                \"52 Week Low\": stock_info.get(\"fiftyTwoWeekLow\", \"N/A\"),\n",
        "                \"Volume\": stock_info.get(\"volume\", \"N/A\"),\n",
        "            })\n",
        "        except Exception as e:\n",
        "            print(f\"Error fetching data for {ticker}: {e}\")\n",
        "\n",
        "    return stock_data\n",
        "\n",
        "def main():\n",
        "    stock_data = get_stock_data(random_tickers)\n",
        "    # Create a DataFrame\n",
        "    df = pd.DataFrame(stock_data)\n",
        "    # Format and display the table\n",
        "    print(\"\\n--- Stock Information for Random S&P 500 Companies ---\\n\")\n",
        "    print(tabulate(df, headers=\"keys\", tablefmt=\"grid\", showindex=False))\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uDD_ozbKYtHF",
        "outputId": "518afa4a-7a43-4064-c336-e635e085e08f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Stock Information for Random S&P 500 Companies ---\n",
            "\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| Ticker   | Company Name                    |   Current Price |   Closing Price |    Market Cap | PE Ratio   |   52 Week High |   52 Week Low |   Volume |\n",
            "+==========+=================================+=================+=================+===============+============+================+===============+==========+\n",
            "| JPM      | JPMorgan Chase & Co.            |         241.995 |         241.995 |  681298165760 | 13.444166  |         254.31 |        161.71 |  3820237 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| CSCO     | Cisco Systems, Inc.             |          58.995 |          58.995 |  234962911232 | 25.319742  |          60.23 |         44.5  |  8584657 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| NFLX     | Netflix, Inc.                   |         926.07  |         926.07  |  395856019456 | 52.320335  |         941.75 |        461.86 |  1748167 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| MSFT     | Microsoft Corporation           |         451.68  |         451.68  | 3358186536960 | 37.267326  |         468.35 |        364.13 | 11806074 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| V        | Visa Inc.                       |         314.605 |         314.605 |  609223180288 | 32.333508  |         317.42 |        252.7  |  1821298 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| AAPL     | Apple Inc.                      |         247.605 |         247.605 | 3742747590656 | 40.657635  |         250.8  |        164.08 | 19989297 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| PEP      | PepsiCo, Inc.                   |         158.265 |         158.265 |  217138003968 | 23.3774    |         183.41 |        155.85 |  2972655 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| INTC     | Intel Corporation               |          20.72  |          20.72  |   89365356544 | N/A        |          51.28 |         18.51 | 57089922 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| MRK      | Merck & Co., Inc.               |         100.82  |         100.82  |  255038291968 | 21.092049  |         134.63 |         94.48 |  5673058 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| UNH      | UnitedHealth Group Incorporated |         516.45  |         516.45  |  475280703488 | 33.601173  |         630.73 |        436.38 |  6021449 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| JNJ      | Johnson & Johnson               |         146.18  |         146.18  |  351945883648 | 24.12211   |         168.85 |        143.13 |  3974408 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| KO       | The Coca-Cola Company           |          63.57  |          63.575 |  273846845440 | 26.377592  |          73.53 |         57.47 |  8931118 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| CVX      | Chevron Corporation             |         154.74  |         154.74  |  275889029120 | 16.985731  |         167.11 |        135.37 |  5412617 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| DIS      | The Walt Disney Company         |         114.67  |         114.67  |  207660662784 | 42.158123  |         123.74 |         83.91 |  3275905 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n",
            "| ADBE     | Adobe Inc.                      |         473.725 |         473.725 |  208533749760 | 38.296284  |         638.25 |        433.97 | 14441940 |\n",
            "+----------+---------------------------------+-----------------+-----------------+---------------+------------+----------------+---------------+----------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lZU2iXPmzGOQ"
      },
      "source": [
        "## Model Overviews\n",
        "Below are the high level overviews of the three statistical models\n",
        "\n",
        "**Geometric Brownian Motion Model (GBM)** [14]\n",
        "\n",
        "- Combines random fluctuations (volatility) and constant drift (expected average returns) to model price evolution\n",
        "\n",
        "- Assumes stock prices follow a continuous random process to map out possible path stock prices could take.\n",
        "\n",
        "**Bootstrapping** [15]\n",
        "\n",
        "- Start with your original dataset and repeatedly create new samples by randomly selecting data points from the original set, with the possibility of selecting the same point more than once. Then, for each new sample, you calculate the statistic you are interested in (like a mean or median), and by repeating this process many time,s you create a distribution of that statistic. This allows you to estimate the uncertaintiy or variability of your statistic.\n",
        "\n",
        "- A Discrete model as it involves resampling from a finite, discrete dataset.\n",
        "\n",
        "- In financial markets, bootstrapping is often used to generate uncertainty intervals.\n",
        "\n",
        "\n",
        "**Jump Diffusion Model** [6]\n",
        "\n",
        "- Combines the smooth continuous path of the trajectory of the stock pricen and the occasion sudden \"jumps\" caused by rare events.\n",
        "\n",
        "- Incorporates aspects of GBM.\n",
        "\n",
        "- Hybrid Model that incorporates both continuous and discrete elements. The smooth continuous path is a continuous process while the jumps are discrete jumps.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J-861SPwxSQO"
      },
      "source": [
        "## Gathering The Necessary Data\n",
        "\n",
        "This code defines a function `get_historical_closing_prices` that retrieves the historical closing prices of a stock given its ticker symbol as evidenced by the `ticker` parameter. It uses the `yfinance` library to access the stock data, fetching all available historical prices. If data is found, it returns the following:\n",
        "\n",
        "1. The closing prices series.\n",
        "\n",
        "2. The start date of the historical data.\n",
        "\n",
        "3. The initial closing price.\n",
        "\n",
        "4. The stock's long name (or the ticker if the name is unavailable).\n",
        "\n",
        "If there is an error or no data, it returns None values and prints an error message"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KUlvfY4HvKZa"
      },
      "outputs": [],
      "source": [
        "def get_historical_closing_prices(ticker):\n",
        "    try:\n",
        "        stock = yf.Ticker(ticker)\n",
        "        data = stock.history(period='max')\n",
        "        if not data.empty:\n",
        "            start_date = data.index[0].date()\n",
        "            # Return the closing prices, start date, first closing price, and the company name (or ticker if unavailable)\n",
        "            return data['Close'], start_date, data['Close'].iloc[0], stock.info.get('longName', ticker)\n",
        "        else:\n",
        "            # Return None if no data is available\n",
        "            return None, None, None, None\n",
        "    except Exception as e:\n",
        "        print(f\"Error fetching data for {ticker}: {e}\")\n",
        "        return None, None, None, None"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Implementation of Three Statistical Models\n",
        "\n",
        "In the three models below, line comments denoted by the `#` provide the user with greater detail of the mathematical steps in the respective models and should provide sufficient insight into the steps. The turtorial does not explcitly mathematically explain the models as it can become compicated. The tutorial describes each models assumptions, parameters, and outputs. The three models were chosen for their relative mathematical simplicity.\n",
        "\n",
        "There is a value in the code that the user can edit:\n",
        "- `n_simulations=300000`:\n",
        "   - By default, the tutorial will run the GBM Model three hundred thousand times as more data helps to create a more accurate outcome. However, if the user is pressed for time, they can decrease the number of simulations at the expense of accuracy. It is best to run the number of simulations across the three models. For example, when we tested the model, we ran 300,000 simulations each to forecast 100 days into the future. This took 18 minutes to run"
      ],
      "metadata": {
        "id": "RQbHQMxi3tWR"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rlWsgnGD0SMg"
      },
      "source": [
        "## Statistical Model 1: Geometric Brownian Motion Model\n",
        "\n",
        "\n",
        "**Assumptions** [14],[2]\n",
        "\n",
        "- Stock Price Dynamics: The model assumes that stock prices follow Geometric Brownian Motion (GBM). This means:\n",
        "    -  Stock prices change continuously over time.\n",
        "    -  The percentage change in price over a small time interval is normally distributed.\n",
        "    -  The expected return and volatility of the stock are constant over time.\n",
        "\n",
        "- Time is Discretized\n",
        "    - The model uses discrete time steps measured by days. Even though time is discretized, the GBM model is still fundamentally continuous as it describes the asset price evolving over time.\n",
        "\n",
        "- Simulations are Independent\n",
        "    - Each simulated stock price path is independent of the others.\n",
        "\n",
        "\n",
        "**Parameters**\n",
        "\n",
        "- `prices` (in `calculate_parameters`)\n",
        "   - A time series of stock prices.\n",
        "   - Used to compute daily log returns for estimating model parameters.\n",
        "\n",
        "- `S0` (in `simulate`)\n",
        "   - The initial stock price at the start of the simulation.\n",
        "\n",
        "- `T` (in `simulate`)\n",
        "   - The simulation horizon in terms of discrete time steps.\n",
        "\n",
        "- `mu` (in `simulate`)\n",
        "   - The drift rate, representing the average rate of return.\n",
        "\n",
        "- `sigma` (in `simulate`)\n",
        "   - The volatility of the stock returns.\n",
        "\n",
        "- `n_simulations` (in `simulate`)\n",
        "   - Number of simulations to perform (default: 1,000,000).\n",
        "\n",
        "**Outputs**\n",
        "\n",
        "- `calculate_parameters`:\n",
        "   - Returns `mu` (drift) and `sigma` (volatility) estimated from historical prices.\n",
        "\n",
        "- `simulate`:\n",
        "   - Produces list of simulated stock prices where each path shows how the stock evolves over time.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1_HfoYcB0TA5"
      },
      "outputs": [],
      "source": [
        "class GBMModel:\n",
        "    # Calculate the drift (mu) and volatility (sigma) from historical prices\n",
        "    @staticmethod\n",
        "    def calculate_parameters(prices):\n",
        "        # Calculate the log returns of the stock prices (log(p_t / p_{t-1}))\n",
        "        log_returns = np.log(prices / prices.shift(1)).dropna()\n",
        "        # Calculate the mean (drift) and standard deviation (volatility) of the log returns\n",
        "        # Drift (average return)\n",
        "        mu = log_returns.mean()\n",
        "        # Volatility (standard deviation of returns)\n",
        "        sigma = log_returns.std()\n",
        "        return mu, sigma\n",
        "\n",
        "    # Simulate the stock price path using GBM\n",
        "    @staticmethod\n",
        "    def simulate(S0, T, mu, sigma, n_simulations=300000):\n",
        "        dt = 1\n",
        "        # Create a list to store the simulated prices for each time step and simulation\n",
        "        # (T+1) time steps, n_simulations paths\n",
        "        prices = np.zeros((T + 1, n_simulations))\n",
        "        # Set the initial price for all simulations to S0\n",
        "        prices[0] = S0\n",
        "        # Repeat over each time step to simulate the price path\n",
        "        for t in range(1, T + 1):\n",
        "            # Generate random normal values for the Wiener process (dW)\n",
        "            dW = np.random.normal(0, 1, n_simulations)\n",
        "            # Calculate the change in price (dS) for each simulation using the GBM formula\n",
        "            dS = mu * prices[t - 1] * dt + sigma * prices[t - 1] * np.sqrt(dt) * dW\n",
        "            # Update the prices for the current time step\n",
        "            prices[t] = prices[t - 1] + dS\n",
        "        return prices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P7_YZmaJ7C7c"
      },
      "source": [
        "## Statistical Model 2: Bootstrap Model\n",
        "\n",
        "\n",
        "\n",
        "**Assumptions** [3],[4],[5], [16]\n",
        "\n",
        "- Future Closely Follows the Past\n",
        "    - The mode assumes that future price momvenets will follow the same statistical distribution as its historical returns. This means the model would not hold well against extreme events or trends.\n",
        "\n",
        "- Time is Discretized\n",
        "    - The model uses discrete time steps measured by days. The overall model itself is also discrete.\n",
        "\n",
        "- Simulations are Independent\n",
        "    - Each simulated stock price path is independent of the others.\n",
        "\n",
        "**Parameters**\n",
        "\n",
        "- `S0` (in `simulate')\n",
        "   - The initial stock price at the start of the simulation.\n",
        "\n",
        "- `T` (in `simulate')\n",
        "   - The simulation horizon in terms of discrete time steps.\n",
        "\n",
        "\n",
        "- `historical_returns` (in `simulate')\n",
        "   - List of past returns used to sample future returns.\n",
        "\n",
        "- `n_simulations` (in `simulate')\n",
        "   - Number of simulations to perform (default: 1,000,000).\n",
        "\n",
        "\n",
        "**Outputs**\n",
        "\n",
        "- `simulate`\n",
        "   - Produces list of simulated stock prices where each path shows how the stock evolves over time.\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LjfAS-LZ01bn"
      },
      "outputs": [],
      "source": [
        "class BootstrapModel:\n",
        "    # Simulate future stock prices using bootstrap sampling from historical returns\n",
        "    @staticmethod\n",
        "    def simulate(S0, T, historical_returns, n_simulations=300000):\n",
        "        # Create a list to store the simulated stock prices for each time step and simulation\n",
        "        prices = np.zeros((T + 1, n_simulations))\n",
        "        # Set the initial stock price for all simulations to the given initial price (S0)\n",
        "        prices[0] = S0\n",
        "        # Repeat over each time step to simulate the price path\n",
        "        for t in range(1, T + 1):\n",
        "            # Sample returns randomly from the historical returns for each simulation\n",
        "            sampled_returns = np.random.choice(historical_returns, n_simulations)\n",
        "            # Update the stock prices at the current time step for each simulation using the sampled returns\n",
        "            prices[t] = prices[t - 1] * (1 + sampled_returns)\n",
        "        return prices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hQpgZP6k7WK1"
      },
      "source": [
        "## Statistical Model 3: Jump-Diffusion Model\n",
        "\n",
        "\n",
        "**Assumptions** [6],[7]\n",
        "\n",
        "- Discrete and Continuous Model\n",
        "    - The model assumes that stock prices follow a continuous process as explored in the GBM model with the addition of discrete jumps. The jumps and continuous process are independent of each other.\n",
        "\n",
        "- Stock Price Dynamics\n",
        "  - The probability of a jump occurring is random but its intensity is constant.\n",
        "  - The drift and volaility remain constant over time.\n",
        "\n",
        "- Simulations are Independent\n",
        "    - Each simulated stock price path is independent of the others.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**Parameters** [7]\n",
        "\n",
        "- `prices` (in `calculate_parameters`)\n",
        "   - A time series of stock prices.\n",
        "   - Used to compute daily log returns for estimating model parameters.\n",
        "\n",
        "- `S0` (in `simulate')\n",
        "   - The initial stock price at the start of the simulation.\n",
        "\n",
        "- `T` (in `simulate')\n",
        "   - The simulation horizon in terms of discrete time steps.\n",
        "\n",
        "- `mu` (in `simulate`)  \n",
        "   - Drift or the expected rate of return of the stock.\n",
        "\n",
        "- `sigma` (in `simulate`)  \n",
        "   - The volatility of the stock's price.\n",
        "\n",
        "- `jump_mu` (in `simulate`)\n",
        "   - The average matnitude of the significant price movements (jumps).\n",
        "\n",
        "- `jump_sigma` (in `simulate`)\n",
        "   - The standard deviation or the variability of the jumps\n",
        "\n",
        "- `lambda_jump` (in `simulate`)\n",
        "   - The intensity of the jumps.\n",
        "\n",
        "- `n_simulations` (in `simulate`)\n",
        "   - Number of simulations to perform (default: 1,000,000)\n",
        "\n",
        "**Outputs**\n",
        "\n",
        "- `calculate_parameters`\n",
        "   - Returns `mu` (drift), `sigma` (volatility), `jump_mu` (jumps), `jump_sigma` (variability of the jumps), `lamda_jump` (jump intensity).\n",
        "\n",
        "- `simulate`\n",
        "   - Produces list of simulated stock prices where each path shows how the stock evolves over time.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BKsNTUv90-qR"
      },
      "outputs": [],
      "source": [
        "class JumpDiffusionModel:\n",
        "    # Calculate the parameters (mu, sigma, jump_mu, jump_sigma, lambda_jump) from historical prices\n",
        "    @staticmethod\n",
        "    def calculate_parameters(prices):\n",
        "        # Calculate the log returns: log(p_t / p_{t-1})\n",
        "        log_returns = np.log(prices / prices.shift(1)).dropna()\n",
        "        # Calculate the mean of log returns (drift or mu)\n",
        "        mu = log_returns.mean()\n",
        "        # Calculate the standard deviation of log returns (volatility or sigma)\n",
        "        sigma = log_returns.std()\n",
        "        # Identify the large jumps in returns (abs(log_return) > 0.05, indicating significant jumps)\n",
        "        jump_returns = log_returns[log_returns.abs() > 0.05]\n",
        "        # Calculate the mean of jump returns (jump_mu), or set it to 0 if there are no jumps\n",
        "        jump_mu = jump_returns.mean() if len(jump_returns) > 0 else 0\n",
        "        # Calculate the standard deviation of jump returns (jump_sigma), or set it to 0 if there are no jumps\n",
        "        jump_sigma = jump_returns.std() if len(jump_returns) > 0 else 0\n",
        "        # Estimate the intensity of jumps (lambda_jump), which is the fraction of returns that are considered jumps\n",
        "        lambda_jump = len(jump_returns) / len(log_returns)\n",
        "        # Return all calculated parameters: mu (drift), sigma (volatility), jump_mu, jump_sigma, and lambda_jump\n",
        "        return mu, sigma, jump_mu, jump_sigma, lambda_jump\n",
        "\n",
        "    # Simulate future stock prices using Jump Diffusion Model\n",
        "    @staticmethod\n",
        "    def simulate(S0, T, mu, sigma, jump_mu, jump_sigma, lambda_jump, n_simulations=300000):\n",
        "        dt = 1\n",
        "        # Prices will be simulated for T time steps, and we will run n_simulations independent simulations\n",
        "        prices = np.zeros((T + 1, n_simulations))\n",
        "        prices[0] = S0\n",
        "        # Repeat each time step (from 1 to T) to simulate future prices\n",
        "        for t in range(1, T + 1):\n",
        "            # Generate random samples from a normal distribution for the Wiener process (Brownian motion)\n",
        "            dW = np.random.normal(0, 1, n_simulations)\n",
        "            # Generate random samples from a Poisson distribution to model the occurrence of jumps\n",
        "            dN = np.random.poisson(lambda_jump * dt, n_simulations)\n",
        "            # Generate the jumps, if any, from a normal distribution with mean jump_mu and std jump_sigma\n",
        "            # The size of the jumps is scaled by dN (i.e., how many jumps occur at each time step)\n",
        "            jumps = np.random.normal(jump_mu, jump_sigma, n_simulations) * dN\n",
        "            # Calculate the change in stock price (dS) using the Jump Diffusion formula:\n",
        "            #   - mu * prices[t - 1] * dt: The drift term (expected return)\n",
        "            #   - sigma * prices[t - 1] * np.sqrt(dt) * dW: The stochastic term (random fluctuation)\n",
        "            #   - jumps: The random jumps occurring during this time step\n",
        "            dS = mu * prices[t - 1] * dt + sigma * prices[t - 1] * np.sqrt(dt) * dW + jumps\n",
        "            # Update the stock prices at time step t using the previous prices and the calculated changes (dS)\n",
        "            prices[t] = prices[t - 1] + dS\n",
        "        return prices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4aK6PVK3Leca"
      },
      "source": [
        "## Distribution Of Simulated Mean Prices\n",
        "\n",
        "The function `visualize_distribution` creates a histogram of the simulated final stock prices after T days, using `matplotlib` to visualize the distribution.\n",
        "\n",
        "It accepts seven parameters:\n",
        "\n",
        "- `final_prices`\n",
        "    - List of simulated stock prices.\n",
        "\n",
        "- `mean_price`\n",
        "    - The mean value of the simulated stock prices.\n",
        "\n",
        "- `median_price`\n",
        "   - The median value of the simulated stock prices\n",
        "\n",
        "- `ci_lower`\n",
        "   - The lower bound of the 95% confidence interval for the simulated stock prices.\n",
        "\n",
        "\n",
        "- `ci_upper`\n",
        "    - The lower bound of the 95% confidence interval for the simulated stock prices.\n",
        "\n",
        "\n",
        " - `model_name`\n",
        "   - The name of the model generating the simulations.\n",
        "\n",
        "\n",
        "- `T`\n",
        "  - The number of days in the simulation.\n",
        "\n",
        "It fits a normal distribution to the data and marks the mean price and 95% confidence interval bounds with dashed vertical lines. The plot is labeled and titled with the model name and simulation duration to provide a visual summary of the price distribution forecast.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "XKm4pJg8vz5x"
      },
      "outputs": [],
      "source": [
        "def visualize_distribution(final_prices, mean_price, median_price, ci_lower, ci_upper, model_name, T):\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    # Plot the histogram of final prices, with 100 bins(the range of values a bar in a histogram represents), normalized to form a probability density, and a skyblue color with black edges\n",
        "    count, bins, ignored = plt.hist(final_prices, bins=100, density=True, alpha=0.6, color='skyblue', edgecolor='black')\n",
        "    # Fit a normal distribution to the final prices using mean and standard deviation (used for comparison)\n",
        "    mu, std = norm.fit(final_prices)\n",
        "    # Get the current x-axis limits (for plotting the normal distribution)\n",
        "    xmin, xmax = plt.xlim()\n",
        "    # Generate a range of x values (to plot the normal distribution curve)\n",
        "    x = np.linspace(xmin, xmax, 1000)\n",
        "    # Compute the probability density function (PDF) of the normal distribution using the mean and std of the final prices\n",
        "    p = norm.pdf(x, mu, std)\n",
        "    # Plot the normal distribution fit on top of the histogram (red line)\n",
        "    plt.plot(x, p, 'r', linewidth=2, label='Normal Distribution Fit')\n",
        "    # Add a vertical dashed line for the mean price\n",
        "    plt.axvline(mean_price, color='blue', linestyle='dashed', linewidth=2, label=f'Mean: {mean_price:.2f}')\n",
        "    # Add a vertical dashed line for the median price\n",
        "    plt.axvline(median_price, color='pink', linestyle='dashed', linewidth=2, label=f'Median: {median_price:.2f}')\n",
        "    # Add vertical dashed lines for the 95% confidence interval lower and upper bounds\n",
        "    plt.axvline(ci_lower, color='green', linestyle='dashed', linewidth=2, label=f'95% CI Lower: {ci_lower:.2f}')\n",
        "    plt.axvline(ci_upper, color='green', linestyle='dashed', linewidth=2, label=f'95% CI Upper: {ci_upper:.2f}')\n",
        "    # Set the title of the plot, including the model name and the number of days (T)\n",
        "    plt.title(f'{model_name} Distribution of Simulated Prices After {T} Days')\n",
        "    plt.xlabel('Stock Price')\n",
        "    plt.ylabel('Probability Density')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bqyX0raUMdd-"
      },
      "source": [
        "## Plot All Simulation Lines\n",
        "\n",
        "The function `plot_simulation_lines` visualizes simulated stock price paths over time for each model.\n",
        "\n",
        "It accepts four parameters:\n",
        "\n",
        " - `simulated_prices`\n",
        "   - A 2D array where each column represents a separate simulated price path for the stock\n",
        "\n",
        " - `model_name`\n",
        "   - The name of the model generating the simulations\n",
        "\n",
        "- `ticker`\n",
        "   - The stock's ticker symbol\n",
        "\n",
        "- `T`\n",
        "  - The number of days in the simulation\n",
        "\n",
        "The function creates a line plot where each simulated price path is plotted in light blue. The plot's title displays the stock's ticker, the simulation duration in days, and the model name used. The x-axis and y-axis represent days and stock price, respectively.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XY1KfzPmL55m"
      },
      "outputs": [],
      "source": [
        "def plot_simulation_lines(simulated_prices, model_name, ticker, T):\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    # Plot all the simulated price paths\n",
        "    for i in range(simulated_prices.shape[1]):\n",
        "        plt.plot(simulated_prices[:, i], color='lightblue', alpha=0.1)\n",
        "\n",
        "    plt.title(f\"All Simulated Price Paths for {ticker} Over {T} Days ({model_name})\")\n",
        "    plt.xlabel('Days')\n",
        "    plt.ylabel('Stock Price')\n",
        "    plt.grid(True)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vcIRbgPcMu6A"
      },
      "source": [
        "## User Inputs\n",
        "\n",
        "\n",
        "The provided code defines the main function of a stock price forecasting tutorial. The program retrieves historical stock prices for a user-specified company and number of days into the future they would like to predict its price.\n",
        "It visualizes the results through a fitted normal distribution of the simulated stock prices as well as the simulated lines. It also lists the summary statistics that are visualized.\n",
        "\n",
        "\n",
        " **Functions**\n",
        "\n",
        "- User Input and Data Retrieval\n",
        "   - The user is prompted to input a stock ticker symbol (e.g., \"MSFT\" for Microsoft).\n",
        "   - The function `get_historical_closing_prices` retrieves historical closing prices, the starting date of the data, the initial closing price, and the company name.\n",
        "   - If data is unavailable, the function exits with a message.\n",
        "\n",
        "- Historical Data Display\n",
        "   - Prints the company name, the most recent closing prices, and the latest price for reference.\n",
        "\n",
        "- Forecast Horizon\n",
        "   - The user specifies the number of days `T` to forecast. The input is validated to ensure it is a positive integer.\n",
        "\n",
        "- Simulation Model\n",
        "   - The program initializes `S_0` as the most recent closing price and calculates historical returns for the three statistical models\n",
        "   \n",
        "\n",
        "**User Edits**\n",
        "\n",
        "- If the user is pressed for time, they can comment out the lines listed below by placing a `#` in front of them. These lines graph all of the simulationlines and are neatly visualized in the fitted normal distributions. Assuming that you run 300,000simulations for each model, it can take anywhere from 15 to 20 minutes plus to finishing running this chunk of code. Additionally, there are instance where the RAM might run out. If you RAM does run out you can either decrease the number of days into the future you would like to predict the stock price or incrementally decrease the number of simulations while keeping in mind that decreasing the number of simulations decrease the fit of the normal distribution.\n",
        "\n",
        "  - `plot_simulation_lines(gbm_simulated_prices, \"GBM Model\", ticker, T)`\n",
        "  - `plot_simulation_lines(bootstrap_simulated_prices, \"Bootstrap Model\", ticker, T)`\n",
        "  - `plot_simulation_lines(jd_simulated_prices, \"Jump-Diffusion Model\", ticker, T)`\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2AVxbyAA93u4",
        "outputId": "69d6e73d-012b-4be2-e352-1c06b6eb0015"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter desired ticker symbol (e.g., MSFT for Microsoft Corp): MSFT\n",
            "\n",
            "Company Name: Microsoft Corporation\n",
            "Historical closing prices for MSFT starting from 1986-03-13:\n",
            "Date\n",
            "2024-12-06 00:00:00-05:00    443.570007\n",
            "2024-12-09 00:00:00-05:00    446.019989\n",
            "2024-12-10 00:00:00-05:00    443.329987\n",
            "2024-12-11 00:00:00-05:00    448.989990\n",
            "2024-12-12 00:00:00-05:00    451.703003\n",
            "Name: Close, dtype: float64\n",
            "Latest closing price: 451.70\n",
            "\n",
            "Enter the number of days to forecast (e.g., 200): 100\n",
            "Geometric Brownian Motion Final Prices: [345.91275564 678.67125417 479.67794314 ... 881.46800922 543.52597849\n",
            " 663.49551007]\n",
            "Geometric Brownian Motion Mean Price: 494.7853507885637\n",
            "Geometric Brownian Motion Median Price: 483.9608603744681\n",
            "Geometric Brownian Motion Standard Deviation Price: 105.52437986746968\n",
            "Geometric Brownian Motion 95% Confidence Interval: [319.59306039 730.95962013]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bootstrap Final Prices: [560.98195338 590.1019881  670.06851321 ... 590.33780954 590.91086321\n",
            " 574.06817935]\n",
            "Bootstrap Mean Price: 506.39627185213516\n",
            "Bootstrap Median Price: 495.82444091607766\n",
            "Bootstrap Standard Deviation Price: 107.43610931335273\n",
            "Bootstrap 95% Confidence Interval: [325.75717637 746.18529177]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jump-Diffusion Final Prices: [697.06540965 573.68304962 496.6857443  ... 585.43714087 610.03869478\n",
            " 471.00799253]\n",
            "Jump-Diffusion Mean Price: 494.57579165626066\n",
            "Jump-Diffusion Median Price: 483.9149042767615\n",
            "Jump-Diffusion Standard Deviation Price: 105.47376844426088\n",
            "Jump-Diffusion 95% Confidence Interval: [319.63262911 731.02631495]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Main function\n",
        "def main():\n",
        "    ticker = input(\"Enter desired ticker symbol (e.g., MSFT for Microsoft Corp): \").strip().upper()\n",
        "    closing_prices, start_date, starting_closing_price, company_name = get_historical_closing_prices(ticker)\n",
        "    # Get historical closing prices for the given ticker using a helper function\n",
        "    if closing_prices is None:\n",
        "        print(f\"No data available for {ticker}.\")\n",
        "        return None, None\n",
        "\n",
        "    print(f\"\\nCompany Name: {company_name}\")\n",
        "    print(f\"Historical closing prices for {ticker} starting from {start_date}:\")\n",
        "    print(closing_prices.tail(5))\n",
        "    print(f\"Latest closing price: {closing_prices.iloc[-1]:.2f}\")\n",
        "    # Ask user for the number of days to forecast\n",
        "    try:\n",
        "        T = int(input(\"\\nEnter the number of days to forecast (e.g., 200): \").strip())\n",
        "        # Ensure that the number of days is positive\n",
        "        if T <= 0:\n",
        "            print(\"Number of days must be a positive integer.\")\n",
        "            return\n",
        "    except ValueError:\n",
        "        print(\"Invalid input for days.\")\n",
        "        return\n",
        "\n",
        "    # Set the initial stock price to the most recent closing price\n",
        "    S0 = closing_prices.iloc[-1]  # Starting price for the forecast models\n",
        "    historical_returns = closing_prices.pct_change().dropna().values\n",
        "\n",
        "    # Graphing Code\n",
        "    # Run GBM - Graphing Code\n",
        "    gbm_mu, gbm_sigma = GBMModel.calculate_parameters(closing_prices)\n",
        "    # Calculate parameters (mu and sigma) for the GBM model\n",
        "    gbm_simulated_prices = GBMModel.simulate(S0, T, gbm_mu, gbm_sigma)\n",
        "    global gbm_final_prices\n",
        "    gbm_final_prices = gbm_simulated_prices[-1]\n",
        "    print (\"Geometric Brownian Motion Final Prices:\", gbm_final_prices)\n",
        "    global gbm_mean_price\n",
        "    gbm_mean_price = np.mean(gbm_final_prices)\n",
        "    print (\"Geometric Brownian Motion Mean Price:\", gbm_mean_price)\n",
        "    global gbm_median_price\n",
        "    gbm_median_price = np.median(gbm_final_prices)\n",
        "    print (\"Geometric Brownian Motion Median Price:\", gbm_median_price)\n",
        "    global gbm_std_dev_price\n",
        "    gbm_std_dev_price = np.std(gbm_final_prices)\n",
        "    print (\"Geometric Brownian Motion Standard Deviation Price:\", gbm_std_dev_price)\n",
        "    global gbm_ci\n",
        "    gbm_ci = np.percentile(gbm_final_prices, [2.5, 97.5])\n",
        "    print (\"Geometric Brownian Motion 95% Confidence Interval:\", gbm_ci)\n",
        "    visualize_distribution(gbm_final_prices, gbm_mean_price, gbm_median_price, gbm_ci[0], gbm_ci[1], \"GBM Model\", T)\n",
        "    plot_simulation_lines(gbm_simulated_prices, \"GBM Model\", ticker, T)\n",
        "\n",
        "    # Graphing Code\n",
        "    # Run Bootstrap - Graphing Code\n",
        "    bootstrap_simulated_prices = BootstrapModel.simulate(S0, T, historical_returns)\n",
        "    # Simulate future prices using the Bootstrap model\n",
        "    global bootstrap_final_prices\n",
        "    bootstrap_final_prices = bootstrap_simulated_prices[-1]\n",
        "    print (\"Bootstrap Final Prices:\", bootstrap_final_prices)\n",
        "    global bootstrap_mean_price\n",
        "    bootstrap_mean_price = np.mean(bootstrap_final_prices)\n",
        "    print (\"Bootstrap Mean Price:\", bootstrap_mean_price)\n",
        "    global bootstrap_median_price\n",
        "    bootstrap_median_price = np.median(bootstrap_final_prices)\n",
        "    print (\"Bootstrap Median Price:\", bootstrap_median_price)\n",
        "    global bootstrap_std_dev_price\n",
        "    bootstrap_std_dev_price = np.std(bootstrap_final_prices)\n",
        "    print (\"Bootstrap Standard Deviation Price:\", bootstrap_std_dev_price)\n",
        "    global bootstrap_ci\n",
        "    bootstrap_ci = np.percentile(bootstrap_final_prices, [2.5, 97.5])\n",
        "    print (\"Bootstrap 95% Confidence Interval:\", bootstrap_ci)\n",
        "    visualize_distribution(bootstrap_final_prices, bootstrap_mean_price, bootstrap_median_price, bootstrap_ci[0], bootstrap_ci[1], \"Bootstrap Model\", T)\n",
        "    plot_simulation_lines(bootstrap_simulated_prices, \"Bootstrap Model\", ticker, T)\n",
        "\n",
        "    # Graphing Code\n",
        "    # Run Jump-Diffusion\n",
        "    jd_mu, jd_sigma, jump_mu, jump_sigma, lambda_jump = JumpDiffusionModel.calculate_parameters(closing_prices)\n",
        "    # Calculate parameters (mu, sigma, jump parameters) for the Jump-Diffusion model\n",
        "    jd_simulated_prices = JumpDiffusionModel.simulate(S0, T, jd_mu, jd_sigma, jump_mu, jump_sigma, lambda_jump)\n",
        "    # Simulate future prices using the Jump-Diffusion model\n",
        "    global jd_final_prices\n",
        "    jd_final_prices = jd_simulated_prices[-1]\n",
        "    print (\"Jump-Diffusion Final Prices:\", jd_final_prices)\n",
        "    global jd_mean_price\n",
        "    jd_mean_price = np.mean(jd_final_prices)\n",
        "    print (\"Jump-Diffusion Mean Price:\", jd_mean_price)\n",
        "    global jd_median_price\n",
        "    jd_median_price = np.median(jd_final_prices)\n",
        "    print (\"Jump-Diffusion Median Price:\", jd_median_price)\n",
        "    global jd_std_dev_price\n",
        "    jd_std_dev_price = np.std(jd_final_prices)\n",
        "    print (\"Jump-Diffusion Standard Deviation Price:\", jd_std_dev_price)\n",
        "    global jd_ci\n",
        "    jd_ci = np.percentile(jd_final_prices, [2.5, 97.5])\n",
        "    print (\"Jump-Diffusion 95% Confidence Interval:\", jd_ci)\n",
        "    visualize_distribution(jd_final_prices, jd_mean_price, jd_median_price, jd_ci[0], jd_ci[1], \"Jump-Diffusion Model\", T)\n",
        "    plot_simulation_lines(jd_simulated_prices, \"Jump-Diffusion Model\", ticker, T)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hHGkN-eREbF9"
      },
      "source": [
        "## Summary Statistics\n",
        "\n",
        "Below is a compiled list of the 95% Confidence Interval, Mean, Median, and Standard Deviation for each statistical model. The definition of these terms of in the \"Important Statistical Terminology\" Section.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XVvHe1PoM-lI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22f9a538-2790-49f6-b912-c523fd3f4cc1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Geometric Brownian Motion Statistics\n",
            "Geometric Brownian Motion Mean Price: 494.7853507885637\n",
            "Geometric Brownian Motion Median: 483.9608603744681\n",
            "Geometric Brownian Motion Standard Deviation: 105.52437986746968\n",
            "Geometric Brownian Motion 95% Confidence Interval: [319.59306039 730.95962013]\n",
            "\n",
            "\n",
            "Bootstrapping Statistics\n",
            "Bootstrap Mean Price: 506.39627185213516\n",
            "Bootstrap Median Price: 495.82444091607766\n",
            "Bootstrap Standard Deviation Price: 107.43610931335273\n",
            "Bootstrap 95% Confidence Interval: [325.75717637 746.18529177]\n",
            "\n",
            "\n",
            "Jump-Diffusion Statistics\n",
            "Jump-Diffusion Mean Price: 494.57579165626066\n",
            "Jump-Diffusion Median Price: 483.9149042767615\n",
            "Jump-Diffusion Standard Deviation Price: 105.47376844426088\n",
            "Jump-Diffusion 95% Confidence Interval: [319.63262911 731.02631495]\n"
          ]
        }
      ],
      "source": [
        "print (\"Geometric Brownian Motion Statistics\")\n",
        "print (\"Geometric Brownian Motion Mean Price:\", gbm_mean_price)\n",
        "print (\"Geometric Brownian Motion Median:\", gbm_median_price)\n",
        "print (\"Geometric Brownian Motion Standard Deviation:\", gbm_std_dev_price)\n",
        "print (\"Geometric Brownian Motion 95% Confidence Interval:\", gbm_ci)\n",
        "print (\"\\n\")\n",
        "\n",
        "print (\"Bootstrapping Statistics\")\n",
        "print (\"Bootstrap Mean Price:\", bootstrap_mean_price)\n",
        "print (\"Bootstrap Median Price:\", bootstrap_median_price)\n",
        "print (\"Bootstrap Standard Deviation Price:\", bootstrap_std_dev_price)\n",
        "print (\"Bootstrap 95% Confidence Interval:\", bootstrap_ci)\n",
        "print (\"\\n\")\n",
        "\n",
        "print (\"Jump-Diffusion Statistics\")\n",
        "print (\"Jump-Diffusion Mean Price:\", jd_mean_price)\n",
        "print (\"Jump-Diffusion Median Price:\", jd_median_price)\n",
        "print (\"Jump-Diffusion Standard Deviation Price:\", jd_std_dev_price)\n",
        "print (\"Jump-Diffusion 95% Confidence Interval:\", jd_ci)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## What If I Want To Test More Statistical Models?\n",
        "\n",
        "You can very easily add and delete models as a way to inspire you to discover new statistical models and their potentially applications beyond finance in three steps.\n",
        "\n",
        "- You would first need to implement the mathematical logic of the statistical model like this tutorial does. Follow a similar structure  by first declaring a new `class`.\n",
        "\n",
        "- Then, copy and paste any of the three code chunks from the \"User Input\" section titled with the comment `#Graphing Code`. Change the parameter variables and function calls as well as the variable numbers throughout the code chunk.\n",
        "\n",
        "  - For example, looking at the code chunk for the Jump-Diffusion Model,      in the line, `jd_mu, jd_sigma, jump_mu, jump_sigma, lambda_jump = JumpDiffusionModel.calculate_parameters(closing_prices)`, `calculate_parameters` in the name of the function from the `JumpDiffusionModel` class. `closing_prices` is the parameeter name of the `closing_prices` function. All of the variable names on the left are the varialbes return by the function.\n",
        "  - jd_simulated_prices = JumpDiffusionModel.simulate(S0, T, jd_mu, jd_sigma, jump_mu, jump_sigma, lambda_jump) refers to the `simulate` function in the class, where the variables inside the parantheses are the parameters of the function. These variables are the same as the ones of the left land side of the code explained in the previous bullet point as the `simulate`function calls on these variables.\n",
        "  - Change the variables in the print lines and print statements in the double quotes to the name of the newly inputtted statistical model.\n",
        "\n",
        "- Finally, add a section in the \"Summary Statistics\" to print your summary statistics by modifying the variable names."
      ],
      "metadata": {
        "id": "ZFX0Zo8WUcKm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Nonparametric Statistical Tests\n",
        "Now that we have all of our data, we want to run some statistical tests to see if the data makes sense or not.\n",
        "\n",
        "From the graphs above, the chance that the observed data represented by the blue graphs fits perfectly with the red fitted normal distribution is extremely low. Since we do not have data that is normally distributed, we must use nonparametric statisical tests to analyze our data. This tutorial will explore two nonparametric statistical tests. [9]\n",
        "\n",
        "Therefore, the assumptions for the two tests are as follows\n",
        "\n",
        "- Independent Samples [9]\n",
        "\n",
        "  - We meet this assumption because each statistical model does not depend on the outcome of another.\n",
        "\n",
        "- The groups are not normally distributed [9]\n",
        "\n",
        "  - We know we meet this assumption for all three statistical models because the distribution in the graph produced above does not perfectly for into the red normal distribution fit.\n",
        "\n",
        "The mathematical steps for the each can be quite lengthy. However, unlike the statistical models, the code for the tests do not give any insight into the math behind them. Therefore, the detailed step-by-step explanation for both tests can be found in the Appendix Section after the Conclusion."
      ],
      "metadata": {
        "id": "P49MeMMx3ZhP"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0lJhITVawaCF"
      },
      "source": [
        "## Kruskal-Wallis Test (H Test)\n",
        "\n",
        "**Description** [9]\n",
        "\n",
        "The Kruskal-Wallis Test (H Test) tests if there is are significant differences between `gbm_final_prices`, `bootstrap_final_prices`, and `jd_final_prices`.\n",
        "\n",
        "We want there to be no significant differences between `gbm_final_prices`, `bootstrap_final_prices`, and `jd_final_prices`as the three statistical models should predict the same price range and predicted price point.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Kruskal-Wallis Test (H Test) in Python\n",
        "\n",
        "To make life easier, the `scipy` library already has a `kruskal` function to run this statistical test automatically. [10]\n",
        "\n",
        "This code runs a Kruskal-Wallis H test on three independent groups `gbm_final_prices`, `bootstrap_final_prices`, and `jd_final_prices` to see if their medians differ significantly. It calculates the H test value and p-value.\n",
        "\n",
        "(__p value__ determines the strength of evidence against a null hypothesis and __H test value__ calculations is described in the Appendix.)  [9]\n",
        "\n",
        "\n",
        "- If the p-value is less than 0.05 there is statistically significant difference between the groups.  [9]\n",
        "\n",
        "- If the p-value is greater than 0.05, there is no statistically significant difference between the groups.  [9]\n",
        "\n",
        "The p value and staitistical significance can change based on the number of simulations you run."
      ],
      "metadata": {
        "id": "-M4C-NXavsGV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IV83e8o_Lv6Y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f500ddf4-2352-41c7-f2c0-68ba1c22557b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kruskal-Wallis test statistic: 2540.5865410822444\n",
            "p-value: 0.0\n",
            "Therefore, we reject the null hypothesis and accept the alternative hypothesis\n",
            "There is a statistically significant difference between the median of the groups.\n"
          ]
        }
      ],
      "source": [
        "# Perform Kruskal-Wallis test to compare the final prices from the three models\n",
        "statistic, p_value = kruskal(gbm_final_prices, bootstrap_final_prices, jd_final_prices)\n",
        "print(\"Kruskal-Wallis test statistic:\", statistic)\n",
        "print(\"p-value:\", p_value)\n",
        "\n",
        "# If the p-value is less than 0.05, it indicates statistical significance, so we reject the null hypothesis\n",
        "if p_value < 0.05:\n",
        "    print (\"Therefore, we reject the null hypothesis and accept the alternative hypothesis\")\n",
        "    print(\"There is a statistically significant difference between the median of the groups.\")\n",
        "\n",
        "else:\n",
        "    print (\"Therefore, we accept the null hypothesis\")\n",
        "    # If p-value >= 0.05, we fail to reject the null hypothesis, implying no significant difference between the groups.\n",
        "    print(\"There is no statistically significant difference between the median of the groups.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "One shortcoming of the H Test is its ability to compute the relationship between each group.\n",
        "\n",
        "In order to figure out individual relationships, we need to run Dunn's Post-Hoc Test below."
      ],
      "metadata": {
        "id": "PEKeyi2VKn-B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dunn's Post-Hoc Test\n",
        "\n",
        "\n",
        "**Description** [9]\n",
        "\n",
        "The Dunn's Post-Hoc Test is a more specific version of the Kruskal-Wallis H Test to determine which individuals groups are statistically significantly different from each other when comparing multiple groups.\n",
        "\n",
        "We want there to be no significant differences between `gbm_final_prices`, `bootstrap_final_prices`, and `jd_final_prices`as the three statistical models should predict the same price range and predicted price point.\n",
        "\n"
      ],
      "metadata": {
        "id": "YHpqqBVsKU35"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dunn's Post-Hoc Test in Python\n",
        "\n",
        "The `scikit` library makes our life easier by automatically computing the Dunn's Post-Hoc Test. [11]\n",
        "\n",
        "We first run the H test to determine if we need to run the Dunn's Post-Hoc Test. We only need to run the Dunn's Post-Hoc Test if the H test is significant. The code outputs the p-values between each group.\n",
        "\n",
        "- If the p-value is less than 0.05 there is statistically significant difference between the two groups.  [10]\n",
        "\n",
        "- If the p-value is greater than 0.05, there is no statistically significant difference between the two groups.  [10]\n",
        "\n",
        "The p value and staitistical significance can change based on the number of simulations you run. [17]"
      ],
      "metadata": {
        "id": "K8wvm-5_0HqF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In order to run the Dunn's Post-Hoc Test, we first need to import a special library called `scikit-posthocs` specially designed for this statistical test."
      ],
      "metadata": {
        "id": "VoacyrXn4-rA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pip install scikit-posthocs"
      ],
      "metadata": {
        "id": "kECoD0RaFrpn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cad24ca7-0293-4af9-a267-d0d0ec7de064"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-posthocs\n",
            "  Downloading scikit_posthocs-0.11.1-py3-none-any.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from scikit-posthocs) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from scikit-posthocs) (1.13.1)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from scikit-posthocs) (0.14.4)\n",
            "Requirement already satisfied: pandas>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from scikit-posthocs) (2.2.2)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (from scikit-posthocs) (0.13.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from scikit-posthocs) (3.8.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2024.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->scikit-posthocs) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->scikit-posthocs) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->scikit-posthocs) (4.55.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->scikit-posthocs) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->scikit-posthocs) (24.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->scikit-posthocs) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->scikit-posthocs) (3.2.0)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels->scikit-posthocs) (1.0.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=0.20.0->scikit-posthocs) (1.17.0)\n",
            "Downloading scikit_posthocs-0.11.1-py3-none-any.whl (33 kB)\n",
            "Installing collected packages: scikit-posthocs\n",
            "Successfully installed scikit-posthocs-0.11.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import scikit_posthocs as sp\n",
        "\n",
        "# Perform Kruskal-Wallis H Test\n",
        "statistic, p_value = kruskal(gbm_final_prices, bootstrap_final_prices, jd_final_prices)\n",
        "\n",
        "# Output Kruskal-Wallis result\n",
        "print(f\"Kruskal-Wallis test statistic: {statistic}\")\n",
        "print(f\"P-value: {p_value}\")\n",
        "\n",
        "# If Kruskal-Wallis test is significant, perform Dunn's test for pairwise comparisons\n",
        "print (\"Group 1: Geometric Brownian Motion Final Prices\")\n",
        "print (\"Group 2: Bootstrap Final Prices\")\n",
        "print (\"Group 3: Jump-Diffusion Final Prices\")\n",
        "\n",
        "# Combine the groups into a single array and create a group label\n",
        "data = np.concatenate([gbm_final_prices, bootstrap_final_prices, jd_final_prices])\n",
        "groups = ['group1']*len(gbm_final_prices) + ['group2']*len(bootstrap_final_prices) + ['group3']*len(jd_final_prices)\n",
        "\n",
        "# Perform Dunn's post-hoc test using scikit-posthocs\n",
        "dunn_results = sp.posthoc_dunn([gbm_final_prices, bootstrap_final_prices, jd_final_prices])\n",
        "\n",
        "print(dunn_results)"
      ],
      "metadata": {
        "id": "X4zOmOXrELu5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95643e3c-4001-470b-81ee-34f106ec34df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kruskal-Wallis test statistic: 2540.5865410822444\n",
            "P-value: 0.0\n",
            "Group 1: Geometric Brownian Motion Final Prices\n",
            "Group 2: Bootstrap Final Prices\n",
            "Group 3: Jump-Diffusion Final Prices\n",
            "          1    2         3\n",
            "1  1.000000  0.0  0.491516\n",
            "2  0.000000  1.0  0.000000\n",
            "3  0.491516  0.0  1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Interpreting The Test Results\n",
        "\n",
        "Interpreting out test results is possibly the most important step when running any statistical test.\n",
        "\n",
        "- Kruskal-Wallis Test (H Test)\n",
        " - Whether or not the Kruskal-Wallis Test produces a statistically significant or insignificant result is no indicator of each models individual relationships.\n",
        "\n",
        "- Dunn's Post-Hoc Test\n",
        "\n",
        " - It makes for the p-value to always be 1 when comparing the same group as there is statitically significant different when comparing the exact same values.\n",
        "\n",
        " - The p-values when comparing different groups will vary based on the number of simulations ran and the number of days into the future the model predicts the price based on the mathematical logic behind the models.  \n",
        "\n",
        " - It would make sense to see a p-value greater than 0.05 when comparing the GBM and Jump-Diffusion Models. As explained earlier, the Jump-Diffusion model incorporates aspect of the GBM model. Therefore, we expect there to be no statistically significant difference between the two groups.  \n",
        "\n",
        " - It would make sense to see a p-value less than 0.05 when comparing the Bootsrtap and GBM models as the math behind the two models are fundamentally different. Additionally, the Bootstrap is discrete and the Jump Diffusion model is continuous as discussed previously. Therefore, we expect there to be statistically significant difference between the two groups.\n",
        "\n",
        " - It would make sense to see a p-value less than 0.05 when comparing the Jump-Diffusion and Bootstrap models. The math behind the two models do not overlap.\n",
        "\n",
        "The p-values of the Kruskal-Wallis test could be better analyzedby incorporating additional models that integrates parts of the bootstrap model and GBM or Jump-Diffusion Model to try to analyze the differences between the two.\n",
        "\n",
        "That being said, this project only illustrates a simply model that would need  more iterations and refininig to be considered \"investment-grade\". Ultimately, it is sufficient for our target audience, which are casual, long-term investors who want to gain a general sense of their investment outlook."
      ],
      "metadata": {
        "id": "DfghCtFEgVz_"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tg9JhDJSJ14F"
      },
      "source": [
        "## Conclusion\n",
        "\n",
        "\n",
        "This project aimed to build a stock price prediction model tailored for casual, long-term investors with limited statistical and Python knowledge. By leveraging Geometric Brownian Motion (GBM), Bootstrapping, and Jump-Diffusion models, the tutorial demonstrates different approaches to simulating stock price movements and forecasting future values. Statistical testing, including the Kruskal-Wallis H Test and Dunn's Post-Hoc Test, was used to validate the models' output, highlighting key differences and similarities between the models. While GBM and Jump-Diffusion showed comparable results due to their shared foundation, Bootstrapping displayed significant deviations, emphasizing the value of using diverse modeling techniques. The tutorial also ensures accessibility by providing detailed explanations of concepts, assumptions, and methodologies. Although this project provides a solid foundation for stock price modeling, further refinements and additional tests could enhance its reliability for professional use. Ultimately, the models and results offer actionable insights for users seeking a general understanding of their investment outlook.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Appendix\n",
        "\n",
        "### Manual Steps for Kruskal-Wallis Test (H Test)\n",
        "\n",
        "__Null Hypothesis (H₀)__: The distribution of the groups are equal. More specficially, the medians of all groups are equal and any differences observed are due to random chance. [10]\n",
        "\n",
        "The null hypothesis is the default positions that assumes no effect, no difference, or no association between the variables studied. [9]\n",
        "\n",
        "__Alternative Hypothesis (H₁)__: The distribution of the groups are not equal. More specifically, the medians of all groups are not equal and any differences observed are not due to random change. [10]\n",
        "\n",
        "The alternative hypothesis proposes a real difference or effect between the variables studied. It is the hypothesis that you hope to support through your data. [9]\n",
        "\n",
        "We run this test at the 5% __significance level__.\n",
        "\n",
        "Null and alternative hypotheses are better understood in the concept of statistical significance. When stating that the data is statistically significant, it means that the observed effect is more than just due to random chance. [8] We can then reject the null hypothesis and accept the alternative hypothesis. [8] For example if we come to the conclusion that our data after running in the H test is statistically significant, we can say reject the null hypothesis, accept the alterantive hypothesis and know that the medians of the groups are not equal and that this difference is due to more than just random chance. [8]\n",
        "\n",
        "The 5% refers to the specific significance level. This means that there is 5% risk of rejecting the null hpoyhesis when it is actually true.[8] The 5% significance level is usually the default choice. However, sometimes a 1% significance level is used when the consequences of false positives are more severe. On the other hand, a 10% significance level may be used when more lenient. [8]\n",
        "\n",
        "For those who may be familiar, the H Test is analogous to the one-way ANOVA test, where you are testing whether or not there is statistically significant difference between the means of three or more groups. [8]\n",
        "\n",
        "\n",
        "Even though the code below uses the `kruskal` command from the `scipy` library to run the H Test, below explicitly lays out the steps of the H Test if done manually. [10]\n",
        "\n",
        "1. State the hypotheses [9]\n",
        "\n",
        "The first step when running any statistical test is to state the hypotheses\n",
        "\n",
        "Null Hypothesis: The medians of all groups are equal.\n",
        "\n",
        "Alternative Hypothesis: At least one group has a median different from the others.\n",
        "\n",
        "2. Organize and rank the data [9]\n",
        "\n",
        "Rank all of the data from all of the groups together from lowest to highest. If there are identical values, assign the average rank to the tied values.\n",
        "\n",
        "3. Sum the Ranks of Each Group [9]\n",
        "\n",
        "Calculate the sum of ranks $R_i$ for eaech group, where $R_i$ is the sum of the ranks in the $i$-th group.\n",
        "\n",
        "Let $n_i$ represent the sample size for each group, and $n$ be the total number of obserations across all groups.\n",
        "\n",
        "4. Calculate the H statistic [9]\n",
        "\n",
        "Calculate the H statistic using the formula below:\n",
        "\n",
        "$H = \\frac{12}{N(N+1)} \\sum \\frac{R_i^2}{n_i} - 3(N+1)$\n",
        "\n",
        "* $R_i$ is the sum of the ranks for group $i$\n",
        "\n",
        "* $n_i$ is the number of observations in group $i$\n",
        "\n",
        "* $N$ is the total number of observations across all groups\n",
        "\n",
        "5. Determine the Degrees of Freedom and Critical Value from a Chi Squared Table [7]\n",
        "\n",
        "The degrees of freedom for this test is $df=k-1$, wehre $k$ is the number of groups.\n",
        "\n",
        "degrees of freedom represents the number of observations thaat are free to vary after the given constraints. [8]\n",
        "\n",
        "Use a Chi-Squared Table <a href=\"https://math.arizona.edu/~jwatkins/chi-square-table.pdf\">here</a> and find the the appropriate $df$ value under the $X^2_{0.05}$ column since we are testing at the 5% significance level. This tabulated value is known as the critical value. [12]\n",
        "\n",
        "chi squared test is used to determine if there is a significan assocation between categorical variables. [12]\n",
        "\n",
        "\n",
        "6. Make a Decision\n",
        "\n",
        "Compare the calculated H value to the p-value.\n",
        "\n",
        "* If the calculated H value is greater than or equal to the tabulated H value, reject the null hypothesis\n",
        "\n",
        "* If the calculated H value is less than the tabulated H value, accept the null hypothesis\n",
        "\n",
        "------------------------------------------------------------\n",
        "\n",
        "### Manual Steps for the Dunn's Post-Hoc Test\n",
        "\n",
        "__Null Hypothesis (H₀)__:  There is no significant difference between any two groups being compared. [9]\n",
        "\n",
        "__Alternative Hypothesis (H₁)__: There is a significant difference between any two groups being compared. [9]\n",
        "\n",
        "\n",
        "1. State the Hypotheses [9]\n",
        "\n",
        "The first step when running any statistical test is to state the hypotheses\n",
        "\n",
        "Null Hypothesis: There is no significant difference between any two groups being compared.\n",
        "\n",
        "Alternative Hypothesis: There is a significant difference between any two groups being compared.\n",
        "\n",
        "2. Organize and rank the data [9]\n",
        "\n",
        "Rank all of the data from all of the groups together from lowest to highest. If there are identical values, assign the average rank to the tied values.\n",
        "\n",
        "3. Sum the Ranks of Each Group [9]\n",
        "\n",
        "Calculate the sum of ranks $R_i$ for eaech group, where $R_i$ is the sum of the ranks in the $i$-th group.\n",
        "\n",
        "4. Calculate the value for the Dunn's Post Hoc Test[9]\n",
        "\n",
        "$Z = \\frac{|R_i - R_j|}{\\sqrt{\\frac{n_i + n_j}{n_{\\text{total}}} \\cdot \\left( \\frac{n_{\\text{total}} - n_i}{n_{\\text{total}} - 1} + \\frac{n_{\\text{total}} - n_j}{n_{\\text{total}} - 1} \\right)}}$\n",
        "\n",
        "* $R_i$ and $R_j$ are the rank sums for groups $i$ and $j$\n",
        "* $n_i$ and $n_j$ are the sample sizes of groups $i$ and $j$\n",
        "* $n_{total}$ is the total sample size (sum of all sample sizes across groups)\n",
        "\n",
        "5. Determine the critical value on a Z table [13]\n",
        "\n",
        "Use a Z table <a href=\"https://z-table.com/\">here</a> and find the appropriate critical value. Since we at testing at 5% significance level, we want to find the critical z value corresponding to 0.9750.\n",
        "\n",
        "This is because the Dunn's Post-Hoc Test is called a __two tail test__, unlike the H test which is one tail test. This is because the Dunn's Post-Hoc Test test whether the groups are different in either direction. Therefore, we need to divide the 5% by 2 to get 2.5%. 1-0.025 = 0.9750, which is the level of confidence.\n",
        "\n",
        "The __level of confidence__ is the proprtion of times that the true value is contained in our given range.\n",
        "\n",
        "0.9750 corresponds to 1.96 on the Z critical values table.\n",
        "\n",
        "6. Make a Decision\n",
        "\n",
        "* If calculated Z value exceed the tabulated Z value, reject the null hypothesis for that pair, which indicates a significant difference between those two groups\n",
        "\n",
        "*  If the calculated Z value does not exceed the tabulated Z value, we fail to reject the null hypothesis for that pair, which indicates no significant difference between those two groups.\n",
        "\n",
        "Even though the Dun''s Post-Hoc Test is a two-tail test, you still compare the calculated p-value to 0.05 from the 5% significance level.\n"
      ],
      "metadata": {
        "id": "fUKn1W0zqGCk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## References\n",
        "\n",
        "1. Hull, J. *Options, Futures, and Other Derivatives.* Pearson, 2018.\n",
        "\n",
        "2. Glasserman, P. *Monte Carlo Methods in Financial Engineering.* Springer, 2004.\n",
        "\n",
        "3. Efron, B., & Tibshirani, R. J. (1993). An Introduction to the Bootstrap. Chapman & Hall/CRC.\n",
        "A foundational book on the theory and applications of bootstrapping.\n",
        "\n",
        "4. \"Bootstrap Method,\" *Wikipedia.* [https://en.wikipedia.org/wiki/Bootstrapping_(statistics)](https://en.wikipedia.org/wiki/Bootstrapping_(statistics).\n",
        "\n",
        "5. \"Simulating Stock Prices,\" *QuantInsti Blog.* [https://blog.quantinsti.com/simulate-stock-prices-python/](https://blog.quantinsti.com/simulate-stock-prices-python/).\n",
        "\n",
        "6. \"What is a Jump Diffusion Model?\" *CQF Blog.* [https://www.cqf.com/blog/quant-finance-101/what-is-a-jump-diffusion-model#:~:text=A%20jump%20diffusion%20model%20is,%2C%20discontinuous%20changes%20(jumps)](https://www.cqf.com/blog/quant-finance-101/what-is-a-jump-diffusion-model#:~:text=A%20jump%20diffusion%20model%20is,%2C%20discontinuous%20changes%20(jumps).\n",
        "\n",
        "7. Polanitzer, Roi. *\"Jump-Diffusion Process with Drift in Python,\" Medium.* [https://medium.com/@polanitzer/jump-diffusion-process-with-drift-in-python-simulate-the-future-distribution-of-foreign-exchange-3d448e6f1d95](https://medium.com/@polanitzer/jump-diffusion-process-with-drift-in-python-simulate-the-future-distribution-of-foreign-exchange-3d448e6f1d95)  .\n",
        "\n",
        "8. Kahl, Alandra. *Introductory Statistics.* Bentham Science Publishers, 2023.\n",
        "\n",
        "9. Corder, Gregory W. *Nonparametric Statistics: A Step-by-Step Approach.* Wiley, 2014.\n",
        "\n",
        "10.  \"Kruskal.\" *Kruskal - SciPy v1.14.1 Manual,* 2024. [https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kruskal.html](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kruskal.html).\n",
        "\n",
        "11. \"Dunn’s Test.\" *scikit-posthocs.* [https://scikit-posthocs.readthedocs.io/en/latest/generated/scikit_posthocs.posthoc_dunn.html](https://scikit-posthocs.readthedocs.io/en/latest/generated/scikit_posthocs.posthoc_dunn.html).  \n",
        "\n",
        "12. \"Chi-Squared Table.\" *Math Arizona.* [https://math.arizona.edu/~jwatkins/chi-square-table.pdf](https://math.arizona.edu/~jwatkins/chi-square-table.pdf)\n",
        "\n",
        "13. \"Z-Table.\" *Z-Table.* [https://z-table.com/](https://z-table.com/)   \n",
        "\n",
        "\n",
        "14. \"How to Use Monteo Carlo Simulation With GBM\" *Investopedia* https://www.investopedia.com/articles/07/montecarlo.asp\n",
        "\n",
        "15. \"Boostrapping Definition, Strategies, and Pros/Cons\" *Investopedia* https://www.investopedia.com/terms/b/bootstrapping.asp\n",
        "\n",
        "\n",
        "16. \"Bootstrap confidence intervals *InfluentialPoints.com* https://influentialpoints.com/Training/bootstrap_confidence_intervals-principles-properties-assumptions.htm#:~:text=With%20a%20very%20few%20exceptions,population%20this%20is%20clearly%20impossible.\n",
        "\n",
        "17. \"skcikit-posthocs 0.11.1\" *pypi.org* https://pypi.org/project/scikit-posthocs/\n",
        "\n",
        "18. \"Trading Terms & Dictionaries\" *Yahoo Finance* https://finance.yahoo.com/blogs/breakout/trading-terms-dictionaries-20110306-110527-005.html\n"
      ],
      "metadata": {
        "id": "zRftJrs8HmgQ"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}